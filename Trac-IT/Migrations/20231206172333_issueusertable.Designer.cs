// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TracIT;

#nullable disable

namespace Trac_IT.Migrations
{
    [DbContext(typeof(TracITDbContext))]
    [Migration("20231206172333_issueusertable")]
    partial class issueusertable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TracIT.Models.Comment", b =>
                {
                    b.Property<int>("commentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("commentId"));

                    b.Property<string>("commentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("issueId")
                        .HasColumnType("integer");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("commentId");

                    b.HasIndex("issueId");

                    b.HasIndex("userId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TracIT.Models.Issue", b =>
                {
                    b.Property<int>("issueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("issueId"));

                    b.Property<DateTime>("dateTimeCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("issueId");

                    b.ToTable("Issues");

                    b.HasData(
                        new
                        {
                            issueId = 1,
                            dateTimeCreated = new DateTime(2023, 12, 6, 12, 23, 32, 401, DateTimeKind.Local).AddTicks(9396),
                            description = "Create modal for entering new issue",
                            title = "Create Modal"
                        });
                });

            modelBuilder.Entity("TracIT.Models.IssueStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("issueId")
                        .HasColumnType("integer");

                    b.Property<int>("statusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("issueId");

                    b.HasIndex("statusId");

                    b.ToTable("IssueStatuses");
                });

            modelBuilder.Entity("TracIT.Models.IssueUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("issueId")
                        .HasColumnType("integer");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("issueId");

                    b.HasIndex("userId");

                    b.ToTable("IssueUser");
                });

            modelBuilder.Entity("TracIT.Models.Status", b =>
                {
                    b.Property<int>("statusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("statusId"));

                    b.Property<string>("statusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("statusId");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            statusId = 1,
                            statusName = "New"
                        },
                        new
                        {
                            statusId = 2,
                            statusName = "Active"
                        },
                        new
                        {
                            statusId = 3,
                            statusName = "Closed"
                        });
                });

            modelBuilder.Entity("TracIT.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("userId"));

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TracIT.Models.Comment", b =>
                {
                    b.HasOne("TracIT.Models.Issue", "issue")
                        .WithMany()
                        .HasForeignKey("issueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TracIT.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("issue");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TracIT.Models.IssueStatus", b =>
                {
                    b.HasOne("TracIT.Models.Issue", "issue")
                        .WithMany("Issuestatuses")
                        .HasForeignKey("issueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TracIT.Models.Status", "status")
                        .WithMany("Issuestatuses")
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("issue");

                    b.Navigation("status");
                });

            modelBuilder.Entity("TracIT.Models.IssueUser", b =>
                {
                    b.HasOne("TracIT.Models.Issue", "issue")
                        .WithMany("Assignees")
                        .HasForeignKey("issueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TracIT.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("issue");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TracIT.Models.Issue", b =>
                {
                    b.Navigation("Assignees");

                    b.Navigation("Issuestatuses");
                });

            modelBuilder.Entity("TracIT.Models.Status", b =>
                {
                    b.Navigation("Issuestatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
